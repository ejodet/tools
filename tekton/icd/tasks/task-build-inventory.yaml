---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-inventory
spec:
  params:
    - name: image-version
      description: |
        the image version to use
      default: "2.9"
    - name: icd-source-repository-directory
      description: the ICD source directory
      default: ibm-cloud-databases
    - name: icd-component-name
      description: the name of the ICD component (database, control-plane, ...)
      default: icd-orchestration
    - name: icd-configuration-file
      description: the configuration file containing the deployment information
      default: image_values.yaml
    - name: target-inventory-repository-directory
      description: the target directory where inventory files will be stored
    - name: repository
      description: the repo to fetch git token from
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: git-access-token
      description: |
        (optional) token to access the git repository. If this token is provided, there will not be an attempt
        to use the git token obtained from the authorization flow when adding the git integration in the toolchain
      default: ""
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
  workspaces:
    - name: output
      mountPath: /artifacts
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
            optional: true
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
  steps:
    - name: fetch-git-token
      image: ibmcom/pipeline-base-image:2.6
      env:
        - name: REPOSITORY
          value: $(params.repository)
      script: |
        #!/bin/bash
        set -e -o pipefail
        if [ $PIPELINE_DEBUG == 1 ]; then
            pwd
            env
            trap env EXIT
            set -x
        fi
        TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
        TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
        ##########################################################################
        # Setting HOME explicitly to have ibmcloud plugins available
        # doing the export rather than env definition is a workaround
        # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
        export HOME="/root"
        ##########################################################################
        if [[ "$REPOSITORY" != *.git ]]; then
          echo "Adding .git suffix to Repository URL"
          REPOSITORY="${REPOSITORY}.git"
        fi
        GIT_SERVICE_INSTANCE_ID=$(jq -r --arg git_repo "$REPOSITORY" \
          '.services[] | select (.parameters.repo_url==$git_repo) | .instance_id' /cd-config/toolchain.json)
        if [ -z "$GIT_SERVICE_INSTANCE_ID" ]; then
          echo "No Git integration (repository url: $REPOSITORY) found in the toolchain"
          exit 1
        fi
        GIT_SERVICE_TYPE=$(jq -r --arg git_repo "$REPOSITORY" \
          '.services[] | select (.parameters.repo_url==$git_repo) | .service_id' /cd-config/toolchain.json)
        if [ "$GIT_SERVICE_TYPE" == "github" ]; then
          GIT_AUTH_USER="x-oauth-basic"
        elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
          GIT_AUTH_USER="x-oauth-basic"
        elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
          GIT_AUTH_USER="oauth2"
        elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
          GIT_AUTH_USER="oauth2"
        elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
          GIT_AUTH_USER="x-token-auth"
        else
          GIT_AUTH_USER="x-token-auth"
        fi;
        GIT_TOKEN="$(params.git-access-token)"
        if [ -z "$GIT_TOKEN" ]; then
          echo "Fetching token for $REPOSITORY"
          ibmcloud config --check-version false
          ibmcloud login -a $(params.ibmcloud-api) -r $TOOLCHAIN_REGION --apikey $API_KEY

          TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
          GIT_TOKEN_URL=$(jq -r --arg git_repo "$REPOSITORY" \
            '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url' \
            /cd-config/toolchain.json)
          # GIT_TOKEN_URL is something like
          # https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=github
          # as there is already an url param git_id, just put the additional ones using &
          GIT_BROKER_URL="${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
          echo "Doing cURL to ${GIT_BROKER_URL}"
          curl -s -o /steps/github_token_result.json -X GET -H "Accept: application/json" \
            -H "Authorization: $TOKEN" "$GIT_BROKER_URL"
          if jq -e '.access_token' /steps/github_token_result.json > /dev/null 2>&1; then
            GIT_TOKEN=$(jq -r '.access_token' /steps/github_token_result.json)
            echo "Access token found for the Git integration (repository url: $REPOSITORY)"
          else
            echo "No access token found for the Git integration (repository url: $REPOSITORY)"
            cat /steps/github_token_result.json
            exit 1
          fi
        else
          echo "Using git Access Token provided"
        fi
        echo "GIT_REPOSITORY=$REPOSITORY" > /steps/next-step-env.properties
        echo "GIT_AUTH_USER=$GIT_AUTH_USER" >> /steps/next-step-env.properties
        echo "GIT_TOKEN=$GIT_TOKEN" >> /steps/next-step-env.properties
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
    - name: build-inventory
      image: ibmcom/pipeline-base-image:$(params.image-version)
      imagePullPolicy: Always
      env:
        - name: IMAGE_VERSION
          value: $(params.image-version)
        - name: ICD_SOURCE_DIRECTORY
          value: $(params.icd-source-repository-directory)
        - name: ICD_COMPONENT_NAME
          value: $(params.icd-component-name)
        - name: ICD_CONFIGURATION_FILE
          value: $(params.icd-configuration-file)
        - name: TARGET_INVENTORY_DIRECTORY
          value: $(params.target-inventory-repository-directory)
      script: |
        #!/bin/bash
        set -e -o pipefail

        HOME_DIR=$(pwd)

        # TODO: check what the real values should be
        REGISTRY_URL="us.icr.io"
        REGITRY_NAMESPACE="ibm_cloud_databases"

        # TODO: REMOVE DUMMY VALUES
        PIPELINE_RUN_ID="123456789"
        BUILD_NUMBER="4567"

        # STATIC
        GIT_ROOT_URL="https://github.ibm.com/ibm-cloud-databases"

        # read the source repo values.yaml
        echo "Analyzing the source repository $ICD_CONFIGURATION_FILE for component $ICD_COMPONENT_NAME"
        cd artifacts/$ICD_SOURCE_DIRECTORY/$ICD_COMPONENT_NAME

        PROJECTS=$(yq r image_values.yaml --tojson | jq 'to_entries[] | .key')

        for PROJECT in $PROJECTS; do
          # project name
          PROJECT=$(echo $PROJECT | sed -e 's/^"//' -e 's/"$//')
          echo "Processing $PROJECT...."

          # image URL
          IMAGE_DIGEST=$(yq r image_values.yaml --tojson | jq --arg project $PROJECT '.[$project].image.digest' | sed -e 's/^"//' -e 's/"$//')
          IMAGE_NAME=$(yq r image_values.yaml --tojson | jq --arg project $PROJECT '.[$project].image.name' | sed -e 's/^"//' -e 's/"$//')
          IMAGE_URL=$REGISTRY_URL/$REGITRY_NAMESPACE/$IMAGE_NAME:$IMAGE_DIGEST

          # version
          VERSION=$(grep version $PROJECT/Chart.yaml | awk '{print $2};')

          # project URL and latest commit
          PROJECT_NAME=$PROJECT

          # mapping
          case $PROJECT in
            formation-autoscaler) PROJECT_NAME="operator";;
            icd-block-storage-driver | icd-block-storage-provisioner) PROJECT_NAME="armada-storage-block-plugin";;
            icd-scheduler) PROJECT_NAME="kubernetes";;
            port-scanner) PROJECT_NAME="port-scanner-image";;
            telegraf) PROJECT_NAME="telegraf-image";;
            scale-operator) PROJECT_NAME="k8s-vertical-auto-scaling";;
          esac
          REPO_URL=$GIT_ROOT_URL/$PROJECT_NAME
          COMMIT_SHA=$(git ls-remote $REPO_URL | head -1 | sed "s/HEAD//")

          # create the inventory file
          printf '{\n"artifact":"%s",\n"pipeline_run_id":"%s",\n"build_number":"%s",\n"version":"%s",\n"name":"%s",\n"repository_url":"%s",\n"commit_sha":"%s"\n}' \
          "$IMAGE_URL" "$PIPELINE_RUN_ID" "$BUILD_NUMBER" "$VERSION" "$PROJECT" "$REPO_URL" "$COMMIT_SHA" > $HOME_DIR/$PROJECT

          # handle dependencies
          DEPENDENCIES=$(yq r image_values.yaml --tojson | jq --arg project $PROJECT '.[$project] | keys | map(select(. != "image")) | .[]')
          for DEPENDENCY in $DEPENDENCIES; do
            DEPENDENCY=$(echo "$DEPENDENCY" | sed -e 's/^"//' -e 's/"$//')
            echo "Processing dependency $DEPENDENCY..."
            # image URL
            IMAGE_DIGEST=$(yq r image_values.yaml --tojson | jq --arg project $PROJECT --arg dependency $DEPENDENCY '.[$project] | .[$dependency].image.digest' | sed -e 's/^"//' -e 's/"$//')
            IMAGE_NAME=$(yq r image_values.yaml --tojson | jq --arg project $PROJECT --arg dependency $DEPENDENCY '.[$project] | .[$dependency].image.name' | sed -e 's/^"//' -e 's/"$//')
            IMAGE_URL=$REGISTRY_URL/$REGITRY_NAMESPACE/$IMAGE_NAME:$IMAGE_DIGEST
            
            # version
            # TODO: none found in https://github.ibm.com/ibm-cloud-databases/ibm-cloud-databases/tree/master/icd-orchestration
            VERSION=$(grep version $IMAGE_NAME/Chart.yaml | awk '{print $2};') || true
            if [ -z "$VERSION" ]; then
              echo "Version not found - setting dummy value for now..."
              VERSION="1234"
            fi

            # project URL and latest commit
            PROJECT_NAME=$IMAGE_NAME
            REPO_URL=$GIT_ROOT_URL/$PROJECT_NAME
            COMMIT_SHA=$(git ls-remote $REPO_URL | head -1 | sed "s/HEAD//")

            # create the inventory file
            printf '{\n"artifact":"%s",\n"pipeline_run_id":"%s",\n"build_number":"%s",\n"version":"%s",\n"name":"%s",\n"repository_url":"%s",\n"commit_sha":"%s"\n}' \
            "$IMAGE_URL" "$PIPELINE_RUN_ID" "$BUILD_NUMBER" "$VERSION" "$PROJECT" "$REPO_URL" "$COMMIT_SHA" > $HOME_DIR/$IMAGE_NAME
          done

        done
        cd $HOME_DIR
        echo ""
        echo "Listing files..."
        ls -l
        echo ""
        echo "Done!"
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
